// Comandos básicos:

sqlite3

.open {c:\sqlite\db\chinook.db}

sqlite3 {c:\sqlite\db\chinook.db}

.tables

.schema {tableName}

// CREATE TABLE:

CREATE TABLE contact_groups(
   contact_id INTEGER,
   group_id INTEGER,
   PRIMARY KEY (contact_id, group_id),
   FOREIGN KEY (contact_id) 
      REFERENCES contacts (contact_id) 
         ON DELETE CASCADE 
         ON UPDATE NO ACTION,
   FOREIGN KEY (group_id) 
      REFERENCES groups (group_id) 
         ON DELETE CASCADE 
         ON UPDATE NO ACTION
);

// SELECT statement:
Solicita dados de uma tabela

SELECT 1 + 1

SELECT 				// Solicitando dados da {column} da {table}
	{column1},
	{column2},
	{column3}
FROM 
	{table};

SELECT * FROM {table} 	// Solicitada todos os dados da {table}

// ORDER BY statement:
Organiza os dados solicitados

SELECT		
   {column1},
   {column2}
FROM
   {table}
ORDER BY
    column_1 ASC,	// ASC = Ascendente
    column_2 DESC;	// DESC = Decrescente

// DISTINCT (clausula opcional do SELECT):
Remove linhas duplicadas quando dados são requisitados por SELECT

// WHERE (clausula opcional do SELECT):

SELECT
	column_list
FROM
	table
WHERE
	search_condition;

SELECT
   name,
   milliseconds,
   bytes,
   albumid
FROM
   tracks
WHERE
   albumid = 1;

// LIMIT:
Limita a quantidade de linhas retornadas pelo SELECT,
é sempre bom usar em relação com a clausula ORDER BY

SELECT
	column_list
FROM
	table
LIMIT inteiro;      // Número de linhas pra retornar

// Join
Juntar dados de duas tabelas diferentes

SELECT 
    Title,
    Name
FROM 
    albums
INNER JOIN artists 
    ON artists.ArtistId = albums.ArtistId;

// Group By
Agrupa dados de uma tabela

SELECT
	albumid,
	COUNT(trackid)
FROM
	tracks
GROUP BY
	albumid;
HAVING 
   condition;

// UNION
Junta duas tabelas em uma

SELECT FirstName, LastName, 'Employee' AS Type
FROM employees
UNION
SELECT FirstName, LastName, 'Customer'
FROM customers;

// CASE
Funciona como uma expressão If-Then-Else

SELECT customerid,
       firstname,
       lastname,
       CASE country 
           WHEN 'USA' 
               THEN 'Domestic' 
           ELSE 'Foreign' 
       END
FROM 
    customers
ORDER BY 
    LastName,
    FirstName;

// INSERT
Self explanatory

INSERT INTO artists (name)
VALUES
	("Buddy Rich"),
	("Candido"),
	("Charlie Byrd");

// UPDATE

UPDATE table
SET column_1 = new_value_1,
    column_2 = new_value_2
WHERE
    search_condition 
ORDER column_or_expression
LIMIT row_count OFFSET offset;

// DELETE

DELETE FROM table
WHERE search_condition
ORDER BY criteria
LIMIT row_count OFFSET offset;

// REPLACE 

REPLACE INTO table(column_list)
VALUES(value_list);

// let sql = `
// SELECT DISTINCT name FROM playlists 
// ORDER BY name
// `
const sqlite3 = require('sqlite3').verbose();

let db = new sqlite3.Database('./data/chinook.db', sqlite3.OPEN_READONLY, (err) => {
    if (err) {
        return console.error(err.message);
    }

    console.log("Connected to the sqlite data");
});

// let sql = `
// SELECT DISTINCT name FROM playlists 
// ORDER BY name
// `

// db.run() CREATE INSERT
// db.all() QUERY
// db.get() QUERY
// db.each() QUERY

// if (err) {
//     return console.log(err.message);
//   }

db.close((err) => {
    if (err) {
        return console.error(err.message);
    }
    console.log("Close database connection");
});